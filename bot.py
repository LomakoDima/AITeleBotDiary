import telebot
from telebot import types
from logic import init_db, add_task, get_tasks, clear_tasks
from ai_logic import process_natural_language, setup_ai
from datetime import datetime
from dotenv import load_dotenv
import re
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
setup_ai(OPENAI_API_KEY)

user_states = {}


def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    keyboard.row("ü§ñ –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
    keyboard.row("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    return keyboard


def cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚ùå –û—Ç–º–µ–Ω–∞")
    return keyboard


@bot.message_handler(commands=['start'])
def start_command(message):
    user_name = message.from_user.first_name
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
    welcome_text += "–Ø —É–º–Ω—ã–π –±–æ—Ç-–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò! ü§ñ\n"
    welcome_text += "–Ø –º–æ–≥—É –ø–æ–Ω–∏–º–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.\n\n"
    welcome_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n"
    welcome_text += "‚Ä¢ '–ù–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –ò–≤–∞–Ω–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00'\n"
    welcome_text += "‚Ä¢ '–ü–æ–∑–≤–æ–Ω–∏ –≤—Ä–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ'\n"
    welcome_text += "‚Ä¢ '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–µ—á–µ—Ä–æ–º'\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"

    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–º–Ω—ã–º –±–æ—Ç–æ–º:\n\n"
    help_text += "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    help_text += "ü§ñ –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ - –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º\n"
    help_text += "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
    help_text += "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
    help_text += "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    help_text += "üß† –ü—Ä–∏–º–µ—Ä—ã —É–º–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
    help_text += "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:30'\n"
    help_text += "‚Ä¢ '–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –ø–æ –¥–æ—Ä–æ–≥–µ –¥–æ–º–æ–π'\n"
    help_text += "‚Ä¢ '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ'\n"
    help_text += "‚Ä¢ '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É'\n"
    help_text += "‚Ä¢ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'\n\n"
    help_text += "–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è!"

    bot.send_message(message.chat.id, help_text, reply_markup=main_keyboard())


@bot.message_handler(
    func=lambda message: message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "ü§ñ –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
                                          "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
def handle_menu_buttons(message):
    user_id = message.from_user.id

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        user_states[user_id] = "waiting_task_description"
        bot.send_message(message.chat.id,
                         "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                         reply_markup=cancel_keyboard())

    elif message.text == "ü§ñ –£–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        user_states[user_id] = "waiting_ai_input"
        bot.send_message(message.chat.id,
                         "üß† –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!\n\n"
                         "–ü—Ä–∏–º–µ—Ä—ã:\n"
                         "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –ü–µ—Ç—Ä–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞'\n"
                         "‚Ä¢ '–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–µ—á–µ—Ä–æ–º'\n"
                         "‚Ä¢ '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ'\n"
                         "‚Ä¢ '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∫ –ø—è—Ç–Ω–∏—Ü–µ'\n\n"
                         "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É:",
                         reply_markup=cancel_keyboard())

    elif message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        show_tasks(message)

    elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ":
        confirm_clear(message)

    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_command(message)


def show_tasks(message):
    user_id = message.from_user.id
    tasks = get_tasks(user_id)

    if not tasks:
        bot.send_message(message.chat.id,
                         "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ! ü§ñ",
                         reply_markup=main_keyboard())
        return

    tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for i, (description, time) in enumerate(tasks, 1):
        tasks_text += f"{i}. üïê {time} - {description}\n"

    bot.send_message(message.chat.id, tasks_text, reply_markup=main_keyboard())


def confirm_clear(message):
    user_id = message.from_user.id
    tasks = get_tasks(user_id)

    if not tasks:
        bot.send_message(message.chat.id,
                         "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                         reply_markup=main_keyboard())
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
    )

    bot.send_message(message.chat.id,
                     f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ {len(tasks)} –∑–∞–¥–∞—á(–∏)?",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    user_id = call.from_user.id

    if call.data == "confirm_clear":
        clear_tasks(user_id)
        bot.edit_message_text(
            "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!",
            call.message.chat.id,
            call.message.message_id
        )
        bot.send_message(call.message.chat.id,
                         "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò! ü§ñ",
                         reply_markup=main_keyboard())

    elif call.data == "cancel_clear":
        bot.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            call.message.chat.id,
            call.message.message_id
        )
        bot.send_message(call.message.chat.id,
                         "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                         reply_markup=main_keyboard())


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def handle_cancel(message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]

    bot.send_message(message.chat.id,
                     "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                     reply_markup=main_keyboard())


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id

    if user_id not in user_states:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞,
        # –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –∫–∞–∫ —É–º–Ω—ã–π –≤–≤–æ–¥
        process_ai_input(message)
        return

    state = user_states[user_id]

    if state == "waiting_ai_input":
        process_ai_input(message)

    elif state == "waiting_task_description":
        user_states[user_id] = {
            'state': 'waiting_task_time',
            'description': message.text
        }
        bot.send_message(message.chat.id,
                         "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30, —É—Ç—Ä–æ–º, –≤–µ—á–µ—Ä–æ–º):",
                         reply_markup=cancel_keyboard())

    elif isinstance(state, dict) and state['state'] == 'waiting_task_time':
        time_text = message.text.strip()

        if validate_time(time_text):
            description = state['description']
            add_task(user_id, description, time_text)

            success_text = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            success_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            success_text += f"üïê –í—Ä–µ–º—è: {time_text}"

            bot.send_message(message.chat.id, success_text, reply_markup=main_keyboard())
            del user_states[user_id]
        else:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
                             "–ü—Ä–∏–º–µ—Ä—ã: 14:30, 9:00, —É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º",
                             reply_markup=cancel_keyboard())


def process_ai_input(message):
    user_id = message.from_user.id

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        bot.send_chat_action(message.chat.id, 'typing')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
        ai_result = process_natural_language(message.text)

        if ai_result['success']:
            description = ai_result['description']
            time = ai_result['time']

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if add_task(user_id, description, time):
                success_text = f"ü§ñ –ò–ò —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à—É –∑–∞–¥–∞—á—É!\n\n"
                success_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                success_text += f"üïê –í—Ä–µ–º—è: {time}\n\n"

                if ai_result.get('explanation'):
                    success_text += f"üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {ai_result['explanation']}"

                bot.send_message(message.chat.id, success_text, reply_markup=main_keyboard())
            else:
                bot.send_message(message.chat.id,
                                 "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                 reply_markup=main_keyboard())
        else:
            error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É: {ai_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            error_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–±—ã—á–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏."

            bot.send_message(message.chat.id, error_text, reply_markup=main_keyboard())

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò: {e}")
        bot.send_message(message.chat.id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–±—ã—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º.",
                         reply_markup=main_keyboard())

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]


def validate_time(time_str):
    time_pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
    if re.match(time_pattern, time_str):
        return True

    time_words = ['—É—Ç—Ä–æ–º', '—É—Ç—Ä–æ', '–¥–Ω–µ–º', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å—é', '–Ω–æ—á—å']
    if time_str.lower() in time_words:
        return True

    if len(time_str) > 0 and len(time_str) < 50:
        return True

    return False


@bot.message_handler(content_types=['photo', 'video', 'audio', 'document', 'voice', 'sticker'])
def handle_media(message):
    bot.send_message(message.chat.id,
                     "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. üìù\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º - —è –ø–æ–π–º—É! ü§ñ\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                     reply_markup=main_keyboard())


if __name__ == "__main__":
    print("ü§ñ –£–º–Ω—ã–π –±–æ—Ç —Å –ò–ò –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")