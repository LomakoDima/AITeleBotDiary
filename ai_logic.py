import openai
import json
import re
from datetime import datetime, timedelta
from typing import Dict, Any

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = None


def setup_ai(api_key: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
    global client
    if not api_key:
        raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    client = openai.OpenAI(api_key=api_key)
    print("‚úÖ –ò–ò –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")


def process_natural_language(text: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á—É

    Args:
        text: –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Dict —Å –∫–ª—é—á–∞–º–∏: success, description, time, explanation, error
    """
    if not client:
        return {
            'success': False,
            'error': '–ò–ò –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        }

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = datetime.now()
        current_date_str = current_datetime.strftime("%Y-%m-%d")
        current_time_str = current_datetime.strftime("%H:%M")
        current_weekday = current_datetime.strftime("%A")

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
        system_prompt = f"""
–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –≤—Ä–µ–º—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date_str}
–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time_str}
–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_weekday}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
2. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
3. –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç (–∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é) —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
4. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{{
    "success": true/false,
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    "time": "–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É"
}}

–ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:
- "–í—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00" ‚Üí description: "–í—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º", time: "–∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
- "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–µ—á–µ—Ä–æ–º" ‚Üí description: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", time: "–≤–µ—á–µ—Ä–æ–º"
- "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ" ‚Üí description: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É", time: "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"
- "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—è—Ç–Ω–∏—Ü–µ" ‚Üí description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", time: "–∫ –ø—è—Ç–Ω–∏—Ü–µ"

–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å –∑–∞–¥–∞—á—É, –≤–µ—Ä–Ω–∏ success: false —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.3,
            max_tokens=300
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = response.choices[0].message.content.strip()

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            result = json.loads(ai_response)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
            return fallback_parsing(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not result.get('success'):
            return {
                'success': False,
                'error': result.get('explanation', '–ò–ò –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É')
            }

        description = result.get('description', '').strip()
        time = result.get('time', '').strip()

        if not description:
            return {
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
            }

        if not time:
            time = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'

        return {
            'success': True,
            'description': description,
            'time': time,
            'explanation': result.get('explanation', '')
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–∞—Ä—Å–∏–Ω–≥
        return fallback_parsing(text)


def fallback_parsing(text: str) -> Dict[str, Any]:
    """
    –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –ò–ò –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
    """
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        time_patterns = [
            r'(\d{1,2}:\d{2})',  # 14:30
            r'\b(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–¥–Ω—ë–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é)\b',  # —É—Ç—Ä–æ–º
            r'\b(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)\b',  # –∑–∞–≤—Ç—Ä–∞
            r'\b(–≤ \d{1,2} —É—Ç—Ä–∞|–≤ \d{1,2} –¥–Ω—è|–≤ \d{1,2} –≤–µ—á–µ—Ä–∞)\b',  # –≤ 2 –¥–Ω—è
            r'\b(–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ|—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)\b',  # –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            r'\b(–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫|–≤ —Å—Ä–µ–¥—É|–≤ —á–µ—Ç–≤–µ—Ä–≥|–≤ –ø—è—Ç–Ω–∏—Ü—É|–≤ —Å—É–±–±–æ—Ç—É|–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b',  # –≤ –ø—è—Ç–Ω–∏—Ü—É
            r'\b(–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É|–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫—É|–∫ —Å—Ä–µ–¥–µ|–∫ —á–µ—Ç–≤–µ—Ä–≥—É|–∫ –ø—è—Ç–Ω–∏—Ü–µ|–∫ —Å—É–±–±–æ—Ç–µ|–∫ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—é)\b'  # –∫ –ø—è—Ç–Ω–∏—Ü–µ
        ]

        found_time = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        description = text.strip()

        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
        for pattern in time_patterns:
            match = re.search(pattern, text.lower())
            if match:
                found_time = match.group(1)
                # –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                description = re.sub(pattern, '', text, flags=re.IGNORECASE).strip()
                description = re.sub(r'\s+', ' ', description)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                break

        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        cleanup_patterns = [
            r'\b(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω–∏—Ç—å)\b',
            r'\b(–º–Ω–µ|—è –¥–æ–ª–∂–µ–Ω|–Ω—É–∂–Ω–æ)\b',
            r'\b(–≤|–Ω–∞|–∫|–¥–æ|–ø–æ—Å–ª–µ)\s*$'
        ]

        for pattern in cleanup_patterns:
            description = re.sub(pattern, '', description, flags=re.IGNORECASE).strip()

        if not description:
            description = text.strip()

        return {
            'success': True,
            'description': description,
            'time': found_time,
            'explanation': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–∑–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º'
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ fallback –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return {
            'success': False,
            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç'
        }


def enhance_time_description(time_str: str) -> str:
    """
    –£–ª—É—á—à–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º
    """
    current_date = datetime.now()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekday_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3,
        '–ø—è—Ç–Ω–∏—Ü–∞': 4, '—Å—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
    if '–∑–∞–≤—Ç—Ä–∞' in time_str.lower():
        tomorrow = current_date + timedelta(days=1)
        return time_str.replace('–∑–∞–≤—Ç—Ä–∞', f"–∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})")

    elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in time_str.lower():
        day_after_tomorrow = current_date + timedelta(days=2)
        return time_str.replace('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', f"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({day_after_tomorrow.strftime('%d.%m')})")

    elif '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é' in time_str.lower():
        next_week = current_date + timedelta(weeks=1)
        return time_str.replace('—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é', f"—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ({next_week.strftime('%d.%m')})")

    return time_str


def test_ai_processing():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    test_cases = [
        "–í—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–µ—á–µ—Ä–æ–º",
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—è—Ç–Ω–∏—Ü–µ",
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
        "–°—Ö–æ–¥–∏—Ç—å –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª —É—Ç—Ä–æ–º",
        "–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞"
    ]

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    for test_text in test_cases:
        result = process_natural_language(test_text)
        print(f"\n–í—Ö–æ–¥: {test_text}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import os
    from dotenv import load_dotenv

    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")

    if api_key:
        setup_ai(api_key)
        test_ai_processing()
    else:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")